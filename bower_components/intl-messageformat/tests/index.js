"use strict";describe("IntlMessageFormat",function(){it("should be a function",function(){expect(IntlMessageFormat).to.be.a("function")}),describe(".__addLocaleData( [obj] )",function(){it("should respond to .__addLocaleData()",function(){expect(IntlMessageFormat.__addLocaleData).to.be.a("function")})}),describe("#resolvedOptions( )",function(){it("should be a function",function(){var e=new IntlMessageFormat("");expect(e.resolvedOptions).to.be.a("function")}),it("should have a `locale` property",function(){var e=new IntlMessageFormat("");expect(e.resolvedOptions()).to.have.key("locale")}),describe("`locale`",function(){function e(e,t){for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){if(o===IntlMessageFormat.defaultLocale)continue;t[o]=e[o],delete e[o]}}var t=IntlMessageFormat.__localeData__,o={};beforeEach(function(){e(t,o)}),afterEach(function(){e(o,t)}),it('should default to "en"',function(){var e=new IntlMessageFormat("");expect(e.resolvedOptions().locale).to.equal("en")}),it("should normalize the casing",function(){e(o,t);var a=new IntlMessageFormat("","en-us");expect(a.resolvedOptions().locale).to.equal("en-US"),a=new IntlMessageFormat("","EN-US"),expect(a.resolvedOptions().locale).to.equal("en-US")}),it("should be a fallback value when data is missing",function(){t.fr=o.fr;var e=new IntlMessageFormat("","fr-FR");expect(e.resolvedOptions().locale).to.equal("fr"),e=new IntlMessageFormat("","pt"),expect(e.resolvedOptions().locale).to.equal("en")})})}),describe("#format( [object] )",function(){it("should be a function",function(){var e=new IntlMessageFormat("");expect(e.format).to.be.a("function")}),it("should return a string",function(){var e=new IntlMessageFormat("");expect(e.format()).to.be.a("string")})}),describe("using a string pattern",function(){it("should properly replace direct arguments in the string",function(){var e=new IntlMessageFormat("My name is {FIRST} {LAST}."),t=e.format({FIRST:"Anthony",LAST:"Pipkin"});expect(t).to.equal("My name is Anthony Pipkin.")})}),describe("and plurals under the Arabic locale",function(){var e="I have {numPeople, plural,zero {zero points}one {a point}two {two points}few {a few points}many {lots of points}other {some other amount of points}}.",t=new IntlMessageFormat(e,"ar");it("should match zero",function(){var e=t.format({numPeople:0});expect(e).to.equal("I have zero points.")}),it("should match one",function(){var e=t.format({numPeople:1});expect(e).to.equal("I have a point.")}),it("should match two",function(){var e=t.format({numPeople:2});expect(e).to.equal("I have two points.")}),it("should match few",function(){var e=t.format({numPeople:5});expect(e).to.equal("I have a few points.")}),it("should match many",function(){var e=t.format({numPeople:20});expect(e).to.equal("I have lots of points.")}),it("should match other",function(){var e=t.format({numPeople:100});expect(e).to.equal("I have some other amount of points.")})}),describe("and changing the locale",function(){var e={en:"{NAME} went to {CITY}.",fr:"{NAME} est {GENDER, select, female {allée}other {allé}} à {CITY}."},t={en:"{TRAVELLERS} went to {CITY}.",fr:"{TRAVELLERS} {TRAVELLER_COUNT, plural, =1 {est {GENDER, select, female {allée}other {allé}}}other {sont {GENDER, select, female {allées}other {allés}}}} à {CITY}."},o={NAME:"Tony",CITY:"Paris",GENDER:"male"},a={NAME:"Jenny",CITY:"Paris",GENDER:"female"},n={TRAVELLERS:"Lucas, Tony and Drew",TRAVELLER_COUNT:3,GENDER:"male",CITY:"Paris"},r={TRAVELLERS:"Monica",TRAVELLER_COUNT:1,GENDER:"female",CITY:"Paris"};it("should format message en-US simple with different objects",function(){var t=new IntlMessageFormat(e.en,"en-US");expect(t.format(o)).to.equal("Tony went to Paris."),expect(t.format(a)).to.equal("Jenny went to Paris.")}),it("should format message fr-FR simple with different objects",function(){var t=new IntlMessageFormat(e.fr,"fr-FR");expect(t.format(o)).to.equal("Tony est allé à Paris."),expect(t.format(a)).to.equal("Jenny est allée à Paris.")}),it("should format message en-US complex with different objects",function(){var e=new IntlMessageFormat(t.en,"en-US");expect(e.format(n)).to.equal("Lucas, Tony and Drew went to Paris."),expect(e.format(r)).to.equal("Monica went to Paris.")}),it("should format message fr-FR complex with different objects",function(){var e=new IntlMessageFormat(t.fr,"fr-FR");expect(e.format(n)).to.equal("Lucas, Tony and Drew sont allés à Paris."),expect(e.format(r)).to.equal("Monica est allée à Paris.")})}),describe("and change the locale with different counts",function(){var e={en:"{COMPANY_COUNT, plural, =1 {One company}other {# companies}} published new books.",ru:"{COMPANY_COUNT, plural, one {Одна компания опубликовала}few {# компании опубликовали}many {# компаний опубликовали}other {# компаний опубликовали}} новые книги."};it("should format a message with en-US locale",function(){var t=new IntlMessageFormat(e.en,"en-US");expect(t.format({COMPANY_COUNT:0})).to.equal("0 companies published new books."),expect(t.format({COMPANY_COUNT:1})).to.equal("One company published new books."),expect(t.format({COMPANY_COUNT:2})).to.equal("2 companies published new books."),expect(t.format({COMPANY_COUNT:5})).to.equal("5 companies published new books."),expect(t.format({COMPANY_COUNT:10})).to.equal("10 companies published new books.")}),it("should format a message with ru-RU locale",function(){var t=new IntlMessageFormat(e.ru,"ru-RU");expect(t.format({COMPANY_COUNT:0})).to.equal("0 компаний опубликовали новые книги."),expect(t.format({COMPANY_COUNT:1})).to.equal("Одна компания опубликовала новые книги."),expect(t.format({COMPANY_COUNT:2})).to.equal("2 компании опубликовали новые книги."),expect(t.format({COMPANY_COUNT:5})).to.equal("5 компаний опубликовали новые книги."),expect(t.format({COMPANY_COUNT:10})).to.equal("10 компаний опубликовали новые книги.")})}),describe("arguments with",function(){describe("no spaces",function(){var e=new IntlMessageFormat("{STATE}"),t="Missouri";it("should fail when the argument in the pattern is not provided",function(){expect(e.format).to.throwException(function(e){expect(e).to.be.an(Error)})}),it("should fail when the argument in the pattern has a typo",function(){function o(){return e.format({"ST ATE":t})}expect(o).to.throwException(function(e){expect(e).to.be.an(Error)})}),it("should succeed when the argument is correct",function(){expect(e.format({STATE:t})).to.equal(t)})}),describe("a numeral",function(){var e=new IntlMessageFormat("{ST1ATE}"),t="Missouri";it("should fail when the argument in the pattern is not provided",function(){function o(){return e.format({FOO:t})}expect(o).to.throwException(function(e){expect(e).to.be.an(Error)})}),it("should fail when the argument in the pattern has a typo",function(){function o(){e.format({"ST ATE":t})}expect(o).to.throwException(function(e){expect(e).to.be.an(Error)})}),it("should succeed when the argument is correct",function(){expect(e.format({ST1ATE:t})).to.equal(t)})})}),describe("selectordinal arguments",function(){var e="This is my {year, selectordinal, one{#st} two{#nd} few{#rd} other{#th}} birthday.";it("should parse without errors",function(){expect(IntlMessageFormat.__parse).withArgs(e).to.not.throwException()}),it("should use ordinal pluralization rules",function(){var t=new IntlMessageFormat(e,"en");expect(t.format({year:1})).to.equal("This is my 1st birthday."),expect(t.format({year:2})).to.equal("This is my 2nd birthday."),expect(t.format({year:3})).to.equal("This is my 3rd birthday."),expect(t.format({year:4})).to.equal("This is my 4th birthday."),expect(t.format({year:11})).to.equal("This is my 11th birthday."),expect(t.format({year:21})).to.equal("This is my 21st birthday."),expect(t.format({year:22})).to.equal("This is my 22nd birthday."),expect(t.format({year:33})).to.equal("This is my 33rd birthday."),expect(t.format({year:44})).to.equal("This is my 44th birthday."),expect(t.format({year:1024})).to.equal("This is my 1,024th birthday.")})}),describe("exceptions",function(){it("should use the correct PT plural rules",function(){var e="{num, plural, one{one} other{other}}",t=new IntlMessageFormat(e,"pt"),o=new IntlMessageFormat(e,"pt-MZ");expect(t.format({num:0})).to.equal("one"),expect(o.format({num:0})).to.equal("other")})})});