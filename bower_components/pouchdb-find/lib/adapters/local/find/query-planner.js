"use strict";function checkFieldInIndex(e,t){for(var r=e.def.fields.map(getKey),n=0,i=r.length;i>n;n++){var s=r[n];if(t===s)return!0}return!1}function userOperatorLosesPrecision(e,t){var r=e[t],n=getKey(r);return"$eq"!==n}function sortFieldsByIndex(e,t){var r=t.def.fields.map(getKey);return e.slice().sort(function(e,t){var n=r.indexOf(e),i=r.indexOf(t);return-1===n&&(n=Number.MAX_VALUE),-1===i&&(i=Number.MAX_VALUE),utils.compare(n,i)})}function getBasicInMemoryFields(e,t,r){r=sortFieldsByIndex(r,e);for(var n=!1,i=0,s=r.length;s>i;i++){var l=r[i];if(n||!checkFieldInIndex(e,l))return r.slice(i);s-1>i&&userOperatorLosesPrecision(t,l)&&(n=!0)}return[]}function getInMemoryFieldsFromNe(e){var t=[];return Object.keys(e).forEach(function(r){var n=e[r];Object.keys(n).forEach(function(e){"$ne"===e&&t.push(r)})}),t}function getInMemoryFields(e,t,r,n){var i=utils.flatten(e,getBasicInMemoryFields(t,r,n),getInMemoryFieldsFromNe(r));return sortFieldsByIndex(utils.uniq(i),t)}function checkIndexFieldsMatch(e,t,r){if(t){var n=utils.oneArrayIsStrictSubArrayOfOther(t,e),i=utils.oneArrayIsSubArrayOfOther(r,e);return n&&i}return utils.oneSetIsSubArrayOfOther(r,e)}function isNonLogicalMatcher(e){return-1===logicalMatchers.indexOf(e)}function checkFieldsLogicallySound(e,t){var r=e[0],n=t[r],i=Object.keys(n).some(function(e){return!isNonLogicalMatcher(e)});if(!i)return!1;var s=1===Object.keys(n).length&&"$ne"===getKey(n);return!s}function checkIndexMatches(e,t,r,n){var i=e.def.fields.map(getKey),s=checkIndexFieldsMatch(i,t,r);if(!s)return!1;var l=checkFieldsLogicallySound(i,n);return l}function findMatchingIndexes(e,t,r,n){for(var i=[],s=0,l=n.length;l>s;s++){var u=n[s],a=checkIndexMatches(u,r,t,e);a&&i.push(u)}return i}function findBestMatchingIndex(e,t,r,n){function i(e){for(var t=e.def.fields.map(getKey),r=0,n=0,i=t.length;i>n;n++){var s=t[n];l[s]&&r++}return r}var s=findMatchingIndexes(e,t,r,n);if(0===s.length)return null;if(1===s.length)return s[0];var l=utils.arrayToObject(t);return utils.max(s,i)}function getSingleFieldQueryOptsFor(e,t){switch(e){case"$eq":return{key:t};case"$lte":return{endkey:t};case"$gte":return{startkey:t};case"$lt":return{endkey:t,inclusive_end:!1};case"$gt":return{startkey:t,inclusive_start:!1}}}function getSingleFieldCoreQueryPlan(e,t){var r,n=getKey(t.def.fields[0]),i=e[n],s=[],l=Object.keys(i);return l.forEach(function(e){if(isNonLogicalMatcher(e))return void s.push(n);var t=i[e],l=getSingleFieldQueryOptsFor(e,t);r=r?utils.mergeObjects([r,l]):l}),{queryOpts:r,inMemoryFields:s}}function getMultiFieldCoreQueryPlan(e,t){switch(e){case"$eq":return{startkey:t,endkey:t};case"$lte":return{endkey:t};case"$gte":return{startkey:t};case"$lt":return{endkey:t,inclusive_end:!1};case"$gt":return{startkey:t,inclusive_start:!1}}}function getMultiFieldQueryOpts(e,t){function r(e){n!==!1&&u.push(COLLATE_LO),i!==!1&&a.push(COLLATE_HI),l=s.slice(e)}for(var n,i,s=t.def.fields.map(getKey),l=[],u=[],a=[],c=0,o=s.length;o>c;c++){var d=s[c],f=e[d];if(!f){r(c);break}if(c>0){if("$ne"in f){r(c);break}var y="$gt"in f||"$gte"in f||"$lt"in f||"$lte"in f,g=Object.keys(e[s[c-1]]),h=utils.arrayEquals(g,["$eq"]),v=utils.arrayEquals(g,Object.keys(f)),O=y&&!h&&!v;if(O){r(c);break}}for(var k=Object.keys(f),F=null,$=0;$<k.length;$++){var p=k[$],M=f[p],I=getMultiFieldCoreQueryPlan(p,M);F=F?utils.mergeObjects([F,I]):I}u.push("startkey"in F?F.startkey:COLLATE_LO),a.push("endkey"in F?F.endkey:COLLATE_HI),"inclusive_start"in F&&(n=F.inclusive_start),"inclusive_end"in F&&(i=F.inclusive_end)}var m={startkey:u,endkey:a};return"undefined"!=typeof n&&(m.inclusive_start=n),"undefined"!=typeof i&&(m.inclusive_end=i),{queryOpts:m,inMemoryFields:l}}function getCoreQueryPlan(e,t){return 1===t.def.fields.length?getSingleFieldCoreQueryPlan(e,t):getMultiFieldQueryOpts(e,t)}function createNoIndexFoundError(e,t,r){if("$ne"===getKey(getValue(r)))return new Error("couldn't find a usable index. try using $and with $lt/$gt instead of $ne");var n=t&&t.length>=e.length?t:e;return new Error("couldn't find a usable index. try creating an index on: "+n.join(", ")+". Make sure that only $eq, $gt, $gte, $lt, and $lte are used for the indexed fields.")}function planQuery(e,t){log("planning query",e);var r=e.selector,n=e.sort,i=getUserFields(r,n),s=i.fields,l=i.sortOrder,u=findBestMatchingIndex(r,s,l,t);if(!u)throw createNoIndexFoundError(s,l,r);var a=u.def.fields[0],c=(r[getKey(a)],getCoreQueryPlan(r,u)),o=c.queryOpts,d=c.inMemoryFields,f=getInMemoryFields(d,u,r,s),y={queryOpts:o,index:u,inMemoryFields:f};return log("query plan",y),y}var utils=require("../../../utils"),log=utils.log,localUtils=require("../utils"),getKey=localUtils.getKey,getValue=localUtils.getValue,getUserFields=localUtils.getUserFields,COLLATE_LO=null,COLLATE_HI={"ï¿¿":{}},logicalMatchers=["$eq","$gt","$gte","$lt","$lte"];module.exports=planQuery;