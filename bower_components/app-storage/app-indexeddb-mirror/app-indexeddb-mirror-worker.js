!function(){"use strict";function e(e,t){e=e||"app-mirror",t=t||"mirrored_data",this[s]=e,this[o]=t,this[r]=new Array,this[i]=null,this.openDb(),self.addEventListener("unhandledrejection",function(e){console.error(e)}),self.addEventListener("error",function(e){console.error(e)}),this.supportsIndexedDB=null!=self.indexedDB,console.log("AppIndexedDBMirrorWorker started...")}var t="internal",n=2,r="__clientPorts",s="__dbName",o="__storeName",i="__dbOpens",a=[function(e){e.database.createObjectStore(e.storeName)},function(e){e.database.createObjectStore(t)}];e.prototype={openDb:function(){return this.__dbOpens=this.__dbOpens||new Promise(function(e,t){console.log("Opening database..");var r=indexedDB.open(this[s],n);r.onupgradeneeded=function(e){console.log("Upgrade needed:",e.oldVersion,"=>",e.newVersion);for(var t={database:r.result,storeName:this[o],dbName:this[s]},n=e.oldVersion;n<e.newVersion;++n)a[n]&&a[n].call(this,t)}.bind(this),r.onsuccess=function(){console.log("Database opened."),e(r.result)},r.onerror=function(){t(r.error)}}.bind(this)),this.__dbOpens},closeDb:function(){return null==this.__dbOpens?Promise.resolve():this.openDb().then(function(e){this.__dbOpens=null,console.log("Closing database.."),e.close()}.bind(this))},operateOnStore:function(e,t,n){var r=Array.from(arguments).slice(3);return this.openDb().then(function(s){return console.log("Store operation:",e,t,n,r),new Promise(function(o,i){try{var a=s.transaction(t,n),c=a.objectStore(t),d=c[e].apply(c,r)}catch(l){return i(l)}a.oncomplete=function(){o(d.result)},a.onabort=function(){i(a.error)}})})},get:function(e,t){return this.operateOnStore("get",e,"readonly",t)},set:function(e,t,n){return this.operateOnStore("put",e,"readwrite",n,t)},clear:function(e){return this.operateOnStore("clear",e,"readwrite")},transaction:function(e,t,n){switch(n=n||null,e){case"get":return this.get(this[o],t);case"set":return this.set(this[o],t,n)}return Promise.reject(new Error("Method not supported: "+e))},validateSession:function(e){return Promise.all([this.openDb(),this.get(t,"session")]).then(function(n){var r=(n[0],n[1]),s=[];e!==r&&(null!=r&&s.push(this.clear(this[o])),s.push(this.set(t,"session",e)))}.bind(this))},registerClient:function(e){e.addEventListener("message",function(t){this.handleClientMessage(t,e)}.bind(this)),!e in this[r]&&this[r].push(e),e.start(),e.postMessage({type:"app-mirror-connected",supportsIndexedDB:this.supportsIndexedDB}),console.log("New client connected.")},handleClientMessage:function(e,t){if(e.data){var n=e.data.id;switch(e.data.type){case"app-mirror-close-db":this.closeDb().then(function(){t.postMessage({type:"app-mirror-db-closed",id:n})});case"app-mirror-validate-session":this.validateSession(e.data.session).then(function(){t.postMessage({type:"app-mirror-session-validated",id:n})});break;case"app-mirror-transaction":this.transaction(e.data.method,e.data.key,e.data.value).then(function(e){t.postMessage({type:"app-mirror-transaction-result",id:n,result:e})});break;case"app-mirror-disconnect":var s=this[r].indexOf(t);-1!==s&&this[r].splice(s,1)}}}},self.appIndexedDBMirrorWorker=new e,self.addEventListener("connect",function(e){appIndexedDBMirrorWorker.registerClient(e.ports[0])})}();